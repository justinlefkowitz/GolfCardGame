import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.*;

public class GUI extends JFrame implements ActionListener, MouseListener {

	private Dimension size;

	private Engine game;
	private ImagePanel background;
	private JPanel gameBoard;
	
	private JPanel bottom;
	private JPanel top;
	private JPanel left;
	private JPanel right;
	
	private JPanel deckPanel;

	
	
	public GUI(Engine e) {
		game = e;
		
		size = new Dimension(750,750);
		this.setTitle("Golf");
		this.setSize(size);
		this.setLocationRelativeTo(null);
		this.setDefaultCloseOperation(EXIT_ON_CLOSE);
		
		
		//set background
		try {
			background = new ImagePanel(ImageIO.read(getClass().getResource("./images/background.jpg")));
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		this.setContentPane(background);
		this.setLayout(new BorderLayout(0,0));
	
		
		setGameBoard();
		
		

		
		this.setVisible(true);
		initialize();
	}
	
	
	private void setGameBoard() {
		//creates gameBoard
		gameBoard = new JPanel();
		gameBoard.setLayout(new GridLayout(3,3));
		gameBoard.setBorder(BorderFactory.createLineBorder(Color.red, 1));
		gameBoard.setOpaque(false);
		gameBoard.setSize(new Dimension(500,500));
		
		
		//sets spacers
		SpacerPanel bl = new SpacerPanel();
		SpacerPanel tl = new SpacerPanel();
		SpacerPanel br = new SpacerPanel();
		SpacerPanel tr = new SpacerPanel();
		
		
		//set player panels
		bottom = createPlayerPanel(game.getPlayer(0));
		top = createPlayerPanel(game.getPlayer(1));
		left = createPlayerPanel();
		right = createPlayerPanel();
		
		deckPanel = new DeckPanel(game.getCards(), game.getTop());
		
		gameBoard.add(tl);
		gameBoard.add(top);
		gameBoard.add(tr);
		gameBoard.add(left);
		gameBoard.add(deckPanel);
		gameBoard.add(right);
		gameBoard.add(bl);
		gameBoard.add(bottom);
		gameBoard.add(br);
		


		
		
		
		
		
		this.add(gameBoard);
		
	}


	private void initialize() {
		//Card c = new Card(2, Card.Suit.DIAMONDS);
		//c.addMouseListener(this);
		
		
		
		this.validate();
	}
	
	
	
	
	
	
	
	
	
	
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void mouseClicked(MouseEvent e) {

	}


	@Override
	public void mousePressed(MouseEvent e) {
		

		
		if (e.getComponent() instanceof Card) {
			Card c = (Card) e.getComponent();
			c.flip();
			repaint();
			
		}
		
		if (e.getSource() == deckPanel) {
			System.out.println("PEN");
		}
		
		
	}


	@Override
	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}
	
	
	public JPanel createPlayerPanel() {
		JPanel panel = new JPanel();
		panel.setBackground(Color.green);
		
		return panel;
		
	}
	
	
	
	public JPanel createPlayerPanel(Player p) {
		
		JPanel panel = new JPanel();
		
		//panel.setBackground(Color.green);
		panel.setOpaque(false);
		panel.setLayout(new GridLayout(2,2,10,10));
		
		for (int i = 0; i < 4; i++) {
			p.hand.getCard(i).addMouseListener(this);
			panel.add(p.hand.getCard(i));
		}
		
		
		return panel;
		
	}


	
	public class SpacerPanel extends JPanel {
		
		
		public SpacerPanel() {
			this.setOpaque(false);		
		}
		
		public SpacerPanel(int w, int h) {

			this.setSize(new Dimension(w,h));
			this.setOpaque(false);
		}

		
		
		
	}


	
	
	

}
